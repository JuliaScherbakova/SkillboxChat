# Простейший алгоритм — это поиск по базе известных вопросов и ответов.

# import random
import re
from nltk import edit_distance
#
# text = input()
# if text in ["Привет", "Здарова", "Хеллоу"]:
#     print(random.choice(["Здрасте", "Йоу", "Приветики"]))
# elif text in ["Пока", "Увидимся", "Чао"]:
#     print(random.choice(["Буду ждать нашей встречи", "Ок", "Бай-бай"]))
# else:
#     print("Не понял")

# input = ввод данных от пользователя
# random.choice = выбор случайного элемента из списка
# print = вывод на экран

# Составим карты "намерений", которые поддерживает наш бот
# examples - фразы на которые реагирует бот
# response - фразы которыми бот отчвечает
INTENTS = {
    "hello": {
        "examples": ["Привет", "Йо", "Хеллоу", "Здравствуйте"],
        "response": ["Здрасте", "Приветик", "Я соскучился"],
    },
    "how_are_you": {
        "examples": ["Как дела", "Как сам", "Чо по настроению", "Ты в ресурсе"],
        "response": ["Дела отлично", "Лучше всех", "Я красавчик и меня очень любит мама"],
    },
    "how_was_your_day":{
        "examples": ["Как день", "Что делал", "Чем занимался"],
        "response": ["Отлично", "Работал", "Пахал"],
    },
    "any_news": {
        "examples": ["Какие новости", "Что нового", "Есть ли новости"],
        "response": ["Никаких", "Меня повысили", "Я уволился", "Тухляк"],
    },
    "what_are_your_plans": {
        "examples": ["Какие планы", "Что будешь делать", "Что дальше", "И чего теперь"],
        "response": ["Не знаю", "Буду думать", "Куплю машину", "Обновлю резюме"],
    },
    "how_is_your_family": {
        "examples": ["Как семья", "Как жена и дети", "Как вы вообще"],
        "response": ["Норм", "На отдыхе", "Не хочу об этом"],
    },
    "any_plans_for_weekend": {
        "examples": ["Какие планы на выходные", "Что в выходные будете делать", "в выходные свободны"],
        "response": ["Не знаю пока", "Едем по делам", "Поедем к родителям", "Дома будем"],
    },
    "come_fishing": {
        "examples": ["Поехали на рыбалку", "Поехали рыбачить", "Погнали в фишпойнт"],
        "response": ["Неее", "Я пас", "Давай, во сколько", "Ваську возьмем с собой"],
    },
    "how_is Vassily": {
        "examples": ["Как там Вася", "Что там у Васи", "Как дела у Васи"],
        "response": ["Не слышал", "Вроде, ок", "Болеет"],
    },
    "what_would_be_the_weather": {
        "examples": ["А какую погоду обещают", "А какой прогноз на выходные", "Сколько градусов к выходным"],
        "response": ["Вроде, тепло еще", "Пока плюс будет", "Нормально будет"],
    },
    "take_nets": {
        "examples": ["Сети берем", "Сети будем брать", "Только удочки берем"],
        "response": ["Не, опасно", "Давай", "Давай возьмем, а там посмотрим по обстановке"],
    },
    "how_many_days": {
        "examples": ["На сколько дней поедем", "Поедем на два дня", "На все выходные поедем"],
        "response": ["Конечно, с ночевкой", "Давай на все выходные", "Я бы на все выходные ехал"],
    },
}


# "   ABC   " => "abc"
# "Hello, my friend!!! How are YOU?:)" => "hello my friend how are you"
user_text = input()
example = "привет"

def filter_text(text):
    # К нижнему регистру "ABC" => "abc"
    text = text.lower()
    # strip - " abc " => "abc"
    text = text.strip()
    # Найти все знаки препинания и заменить их на пустоту ""
    # [^ ] - "набор символов кроме"
    # \w - символы из которых состоят слова (word) = a-z0-9
    # \s - символы пробела (space) = \t \r \n \s
    expression = r"[^\w\s]"
    text = re.sub(expression, "", text)
    return text

print(filter_text(user_text))

def text_match(user_text, example):
    user_text = filter_text(user_text)
    example = filter_text(example)
    # Задание
    # Дописать функцию так, чтобы все примеры ниже работали
    distance = edit_distance(user_text, example)
    if distance >= 3:
        return False
    # Расстояние Левенштейна, мера того насколько строки отличаются
    # Посчитаем среднюю длину из двух фраз
    avg_len = (len(example) + len(user_text)) / 2
    # Процент опечаток
    ratio = distance / avg_len
    if ratio > 0.4:
        return False   # Больше 40% слова опечаталось - значит фразы не совпадают
    else:
        return True
    # return ration > 0.4
print(text_match(user_text, example))